// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_d0601/page/home/discover/model/chat_message_entity.dart';
import 'package:flutter_d0601/page/home/discover/model/friend_entity.dart';
import 'package:flutter_d0601/page/home/discover/model/other_data_entity.dart';
import 'package:flutter_d0601/page/home/discover/model/quick_reply_messages_entity.dart';
import 'package:flutter_d0601/page/home/my/model/money_config_entity.dart';
import 'package:flutter_d0601/page/home/my/model/query_app_pay_channel_entity.dart';
import 'package:flutter_d0601/page/home/my/model/query_pay_config_ext_entity.dart';
import 'package:flutter_d0601/page/home/my/model/query_user_entity.dart';
import 'package:flutter_d0601/page/home/my/model/recharge_entity.dart';
import 'package:flutter_d0601/page/home/my/model/regular_photo_album_entity.dart';
import 'package:flutter_d0601/page/home/my/model/user_account_detail_entity.dart';
import 'package:flutter_d0601/page/home/sed/model/query_seek_angle_info_entity.dart';
import 'package:flutter_d0601/page/home/sed/model/query_seek_likes_visitors_entity.dart';
import 'package:flutter_d0601/page/home/sed/model/query_seek_recommend_list_entity.dart';
import 'package:flutter_d0601/page/home/sed/model/sliding_record_entity.dart';
import 'package:flutter_d0601/page/home/sed/model/user_ai_tag_enums_entity.dart';
import 'package:flutter_d0601/page/login/model/login_entity.dart';
import 'package:flutter_d0601/page/model/audit_switch_entity.dart';
import 'package:flutter_d0601/page/model/base_entity.dart';
import 'package:flutter_d0601/page/model/update_app_entity.dart';
import 'package:flutter_d0601/page/model/upload_resource_configuration_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;

  static Map<String, JsonConvertFunction> get convertFuncMap =>
      {
        (ChatMessageEntity).toString(): ChatMessageEntity.fromJson,
        (FriendEntity).toString(): FriendEntity.fromJson,
        (OtherDataEntity).toString(): OtherDataEntity.fromJson,
        (QuickReplyMessagesEntity).toString(): QuickReplyMessagesEntity
            .fromJson,
        (QuickReplyMessagesData).toString(): QuickReplyMessagesData.fromJson,
        (MoneyConfigEntity).toString(): MoneyConfigEntity.fromJson,
        (MoneyConfigData).toString(): MoneyConfigData.fromJson,
        (QueryAppPayChannelEntity).toString(): QueryAppPayChannelEntity
            .fromJson,
        (QueryAppPayChannelData).toString(): QueryAppPayChannelData.fromJson,
        (QueryPayConfigExtEntity).toString(): QueryPayConfigExtEntity.fromJson,
        (QueryPayConfigExtData).toString(): QueryPayConfigExtData.fromJson,
        (QueryUserEntity).toString(): QueryUserEntity.fromJson,
        (QueryUserData).toString(): QueryUserData.fromJson,
        (QueryUserDataFunctionAuth).toString(): QueryUserDataFunctionAuth
            .fromJson,
        (RechargeEntity).toString(): RechargeEntity.fromJson,
        (RechargeData).toString(): RechargeData.fromJson,
        (RegularPhotoAlbumEntity).toString(): RegularPhotoAlbumEntity.fromJson,
        (RegularPhotoAlbumItems).toString(): RegularPhotoAlbumItems.fromJson,
        (UserAccountDetailEntity).toString(): UserAccountDetailEntity.fromJson,
        (UserAccountDetailData).toString(): UserAccountDetailData.fromJson,
        (QuerySeekAngleInfoEntity).toString(): QuerySeekAngleInfoEntity
            .fromJson,
        (QuerySeekAngleInfoData).toString(): QuerySeekAngleInfoData.fromJson,
        (QuerySeekAngleInfoDataPurpose)
            .toString(): QuerySeekAngleInfoDataPurpose.fromJson,
        (QuerySeekAngleInfoDataPersonality)
            .toString(): QuerySeekAngleInfoDataPersonality.fromJson,
        (QuerySeekAngleInfoDataInterest)
            .toString(): QuerySeekAngleInfoDataInterest.fromJson,
        (QuerySeekLikesVisitorsEntity).toString(): QuerySeekLikesVisitorsEntity
            .fromJson,
        (QuerySeekLikesVisitorsItems).toString(): QuerySeekLikesVisitorsItems
            .fromJson,
        (QuerySeekRecommendListEntity).toString(): QuerySeekRecommendListEntity
            .fromJson,
        (QuerySeekRecommendListData).toString(): QuerySeekRecommendListData
            .fromJson,
        (QuerySeekRecommendListDataAngleList)
            .toString(): QuerySeekRecommendListDataAngleList.fromJson,
        (SlidingRecordEntity).toString(): SlidingRecordEntity.fromJson,
        (UserAiTagEnumsEntity).toString(): UserAiTagEnumsEntity.fromJson,
        (UserAiTagEnumsData).toString(): UserAiTagEnumsData.fromJson,
        (UserAiTagEnumsDataPersonality)
            .toString(): UserAiTagEnumsDataPersonality.fromJson,
        (UserAiTagEnumsDataPurpose).toString(): UserAiTagEnumsDataPurpose
            .fromJson,
        (UserAiTagEnumsDataInterest).toString(): UserAiTagEnumsDataInterest
            .fromJson,
        (LoginEntity).toString(): LoginEntity.fromJson,
        (LoginData).toString(): LoginData.fromJson,
        (LoginDataUserInfo).toString(): LoginDataUserInfo.fromJson,
        (LoginDataUserInfoAbResult).toString(): LoginDataUserInfoAbResult
            .fromJson,
        (LoginDataUserInfoFunctionAuth)
            .toString(): LoginDataUserInfoFunctionAuth.fromJson,
        (AuditSwitchEntity).toString(): AuditSwitchEntity.fromJson,
        (AuditSwitchData).toString(): AuditSwitchData.fromJson,
        (BaseEntity).toString(): BaseEntity.fromJson,
        (UpdateAppEntity).toString(): UpdateAppEntity.fromJson,
        (UpdateAppData).toString(): UpdateAppData.fromJson,
        (UploadResourceConfigurationEntity)
            .toString(): UploadResourceConfigurationEntity.fromJson,
        (UploadResourceConfigurationData)
            .toString(): UploadResourceConfigurationData.fromJson,
      };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<ChatMessageEntity>[] is M) {
      return data.map<ChatMessageEntity>((Map<String, dynamic> e) =>
          ChatMessageEntity.fromJson(e)).toList() as M;
    }
    if (<FriendEntity>[] is M) {
      return data.map<FriendEntity>((Map<String, dynamic> e) =>
          FriendEntity.fromJson(e)).toList() as M;
    }
    if (<OtherDataEntity>[] is M) {
      return data.map<OtherDataEntity>((Map<String, dynamic> e) =>
          OtherDataEntity.fromJson(e)).toList() as M;
    }
    if (<QuickReplyMessagesEntity>[] is M) {
      return data.map<QuickReplyMessagesEntity>((Map<String, dynamic> e) =>
          QuickReplyMessagesEntity.fromJson(e)).toList() as M;
    }
    if (<QuickReplyMessagesData>[] is M) {
      return data.map<QuickReplyMessagesData>((Map<String, dynamic> e) =>
          QuickReplyMessagesData.fromJson(e)).toList() as M;
    }
    if (<MoneyConfigEntity>[] is M) {
      return data.map<MoneyConfigEntity>((Map<String, dynamic> e) =>
          MoneyConfigEntity.fromJson(e)).toList() as M;
    }
    if (<MoneyConfigData>[] is M) {
      return data.map<MoneyConfigData>((Map<String, dynamic> e) =>
          MoneyConfigData.fromJson(e)).toList() as M;
    }
    if (<QueryAppPayChannelEntity>[] is M) {
      return data.map<QueryAppPayChannelEntity>((Map<String, dynamic> e) =>
          QueryAppPayChannelEntity.fromJson(e)).toList() as M;
    }
    if (<QueryAppPayChannelData>[] is M) {
      return data.map<QueryAppPayChannelData>((Map<String, dynamic> e) =>
          QueryAppPayChannelData.fromJson(e)).toList() as M;
    }
    if (<QueryPayConfigExtEntity>[] is M) {
      return data.map<QueryPayConfigExtEntity>((Map<String, dynamic> e) =>
          QueryPayConfigExtEntity.fromJson(e)).toList() as M;
    }
    if (<QueryPayConfigExtData>[] is M) {
      return data.map<QueryPayConfigExtData>((Map<String, dynamic> e) =>
          QueryPayConfigExtData.fromJson(e)).toList() as M;
    }
    if (<QueryUserEntity>[] is M) {
      return data.map<QueryUserEntity>((Map<String, dynamic> e) =>
          QueryUserEntity.fromJson(e)).toList() as M;
    }
    if (<QueryUserData>[] is M) {
      return data.map<QueryUserData>((Map<String, dynamic> e) =>
          QueryUserData.fromJson(e)).toList() as M;
    }
    if (<QueryUserDataFunctionAuth>[] is M) {
      return data.map<QueryUserDataFunctionAuth>((Map<String, dynamic> e) =>
          QueryUserDataFunctionAuth.fromJson(e)).toList() as M;
    }
    if (<RechargeEntity>[] is M) {
      return data.map<RechargeEntity>((Map<String, dynamic> e) =>
          RechargeEntity.fromJson(e)).toList() as M;
    }
    if (<RechargeData>[] is M) {
      return data.map<RechargeData>((Map<String, dynamic> e) =>
          RechargeData.fromJson(e)).toList() as M;
    }
    if (<RegularPhotoAlbumEntity>[] is M) {
      return data.map<RegularPhotoAlbumEntity>((Map<String, dynamic> e) =>
          RegularPhotoAlbumEntity.fromJson(e)).toList() as M;
    }
    if (<RegularPhotoAlbumItems>[] is M) {
      return data.map<RegularPhotoAlbumItems>((Map<String, dynamic> e) =>
          RegularPhotoAlbumItems.fromJson(e)).toList() as M;
    }
    if (<UserAccountDetailEntity>[] is M) {
      return data.map<UserAccountDetailEntity>((Map<String, dynamic> e) =>
          UserAccountDetailEntity.fromJson(e)).toList() as M;
    }
    if (<UserAccountDetailData>[] is M) {
      return data.map<UserAccountDetailData>((Map<String, dynamic> e) =>
          UserAccountDetailData.fromJson(e)).toList() as M;
    }
    if (<QuerySeekAngleInfoEntity>[] is M) {
      return data.map<QuerySeekAngleInfoEntity>((Map<String, dynamic> e) =>
          QuerySeekAngleInfoEntity.fromJson(e)).toList() as M;
    }
    if (<QuerySeekAngleInfoData>[] is M) {
      return data.map<QuerySeekAngleInfoData>((Map<String, dynamic> e) =>
          QuerySeekAngleInfoData.fromJson(e)).toList() as M;
    }
    if (<QuerySeekAngleInfoDataPurpose>[] is M) {
      return data.map<QuerySeekAngleInfoDataPurpose>((Map<String, dynamic> e) =>
          QuerySeekAngleInfoDataPurpose.fromJson(e)).toList() as M;
    }
    if (<QuerySeekAngleInfoDataPersonality>[] is M) {
      return data.map<QuerySeekAngleInfoDataPersonality>((
          Map<String, dynamic> e) =>
          QuerySeekAngleInfoDataPersonality.fromJson(e)).toList() as M;
    }
    if (<QuerySeekAngleInfoDataInterest>[] is M) {
      return data.map<QuerySeekAngleInfoDataInterest>((
          Map<String, dynamic> e) => QuerySeekAngleInfoDataInterest.fromJson(e))
          .toList() as M;
    }
    if (<QuerySeekLikesVisitorsEntity>[] is M) {
      return data.map<QuerySeekLikesVisitorsEntity>((Map<String, dynamic> e) =>
          QuerySeekLikesVisitorsEntity.fromJson(e)).toList() as M;
    }
    if (<QuerySeekLikesVisitorsItems>[] is M) {
      return data.map<QuerySeekLikesVisitorsItems>((Map<String, dynamic> e) =>
          QuerySeekLikesVisitorsItems.fromJson(e)).toList() as M;
    }
    if (<QuerySeekRecommendListEntity>[] is M) {
      return data.map<QuerySeekRecommendListEntity>((Map<String, dynamic> e) =>
          QuerySeekRecommendListEntity.fromJson(e)).toList() as M;
    }
    if (<QuerySeekRecommendListData>[] is M) {
      return data.map<QuerySeekRecommendListData>((Map<String, dynamic> e) =>
          QuerySeekRecommendListData.fromJson(e)).toList() as M;
    }
    if (<QuerySeekRecommendListDataAngleList>[] is M) {
      return data.map<QuerySeekRecommendListDataAngleList>((
          Map<String, dynamic> e) =>
          QuerySeekRecommendListDataAngleList.fromJson(e)).toList() as M;
    }
    if (<SlidingRecordEntity>[] is M) {
      return data.map<SlidingRecordEntity>((Map<String, dynamic> e) =>
          SlidingRecordEntity.fromJson(e)).toList() as M;
    }
    if (<UserAiTagEnumsEntity>[] is M) {
      return data.map<UserAiTagEnumsEntity>((Map<String, dynamic> e) =>
          UserAiTagEnumsEntity.fromJson(e)).toList() as M;
    }
    if (<UserAiTagEnumsData>[] is M) {
      return data.map<UserAiTagEnumsData>((Map<String, dynamic> e) =>
          UserAiTagEnumsData.fromJson(e)).toList() as M;
    }
    if (<UserAiTagEnumsDataPersonality>[] is M) {
      return data.map<UserAiTagEnumsDataPersonality>((Map<String, dynamic> e) =>
          UserAiTagEnumsDataPersonality.fromJson(e)).toList() as M;
    }
    if (<UserAiTagEnumsDataPurpose>[] is M) {
      return data.map<UserAiTagEnumsDataPurpose>((Map<String, dynamic> e) =>
          UserAiTagEnumsDataPurpose.fromJson(e)).toList() as M;
    }
    if (<UserAiTagEnumsDataInterest>[] is M) {
      return data.map<UserAiTagEnumsDataInterest>((Map<String, dynamic> e) =>
          UserAiTagEnumsDataInterest.fromJson(e)).toList() as M;
    }
    if (<LoginEntity>[] is M) {
      return data.map<LoginEntity>((Map<String, dynamic> e) =>
          LoginEntity.fromJson(e)).toList() as M;
    }
    if (<LoginData>[] is M) {
      return data.map<LoginData>((Map<String, dynamic> e) =>
          LoginData.fromJson(e)).toList() as M;
    }
    if (<LoginDataUserInfo>[] is M) {
      return data.map<LoginDataUserInfo>((Map<String, dynamic> e) =>
          LoginDataUserInfo.fromJson(e)).toList() as M;
    }
    if (<LoginDataUserInfoAbResult>[] is M) {
      return data.map<LoginDataUserInfoAbResult>((Map<String, dynamic> e) =>
          LoginDataUserInfoAbResult.fromJson(e)).toList() as M;
    }
    if (<LoginDataUserInfoFunctionAuth>[] is M) {
      return data.map<LoginDataUserInfoFunctionAuth>((Map<String, dynamic> e) =>
          LoginDataUserInfoFunctionAuth.fromJson(e)).toList() as M;
    }
    if (<AuditSwitchEntity>[] is M) {
      return data.map<AuditSwitchEntity>((Map<String, dynamic> e) =>
          AuditSwitchEntity.fromJson(e)).toList() as M;
    }
    if (<AuditSwitchData>[] is M) {
      return data.map<AuditSwitchData>((Map<String, dynamic> e) =>
          AuditSwitchData.fromJson(e)).toList() as M;
    }
    if (<BaseEntity>[] is M) {
      return data.map<BaseEntity>((Map<String, dynamic> e) =>
          BaseEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateAppEntity>[] is M) {
      return data.map<UpdateAppEntity>((Map<String, dynamic> e) =>
          UpdateAppEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateAppData>[] is M) {
      return data.map<UpdateAppData>((Map<String, dynamic> e) =>
          UpdateAppData.fromJson(e)).toList() as M;
    }
    if (<UploadResourceConfigurationEntity>[] is M) {
      return data.map<UploadResourceConfigurationEntity>((
          Map<String, dynamic> e) =>
          UploadResourceConfigurationEntity.fromJson(e)).toList() as M;
    }
    if (<UploadResourceConfigurationData>[] is M) {
      return data.map<UploadResourceConfigurationData>((
          Map<String, dynamic> e) =>
          UploadResourceConfigurationData.fromJson(e)).toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}